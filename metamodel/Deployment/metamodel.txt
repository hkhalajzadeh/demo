==========================
Graph Type
==========================
Deployment
	Problem: String

==========================
Object Types
==========================
Node
	A node denotes to a resource in the real world, such as printer, CPU, and memory, which can distribute and execute elements of our logical models. A node is represented as a three-dimensional rectangular. Node can be either a type or an instance and it can be characterized with a stereotype and documentation text.
	---------------------------------------------
	Type name: String
	Instance name: String
	Stereotype: String
	Documentation: Text
Component
	A component describes an executable software module with identity and well-defined interface. Components are characterized with instance and type names, package which it belongs, stereotype, and documentation.
	---------------------------------------------
	Name: String
	Package: Package
	Stereotype: String
	Indirectly instantiated: Boolean
	Documentation: Text
Object [UML]
	An object denotes to an instance of a class. An object has six properties: name of instance, name of class of that instance, multiplicity, it's attribute values, stereotype and documentation.
	---------------------------------------------
	Object name: String
	Class: Class [UML]
	Multiple?: Boolean
	Variables: OrderedCollection (Variable [UML])
	Stereotype: String
	Documentation: Text
Package
	A package is used for grouping elements and organizing models: a system may be thought of as a single high-level package included other model elements and other packages. Depending on the graph type used a package can contain a set of use cases, classes or other packages. Each package is represented with a folder symbol with name of the package inside the symbol and steretotype of the package above the symbol.
	---------------------------------------------
	Package name: String
	Stereotype: String
	Documentation: Text
Note text
	Note is a special object for adding additional text anywhere in the graphs. It can be linked to another design objects with a note connection relationship.
	---------------------------------------------
	Note text: Text
	Stereotype: String
Artifact
	Artifact Name: String

==========================
Relationship Types
==========================
Association [UML]
	An association describes a semantic connection between two classes. Each association relationship is characterized derivation rules and documentation. The roles of the association are further characterized to define associations in more detaile with the following properties:
	- association name according to the direction of the associaton 
	- role name to characterize the class/objects role in the relationship
	- multiplicity constraint 
	- ordered? to define whether links between objects have order
	- navigable? to indicate that navigation is supported along the association relationship towards the class/object attached to the arrow, and 
	- qualifiers to define values which serve to partition the set of objects associated with an object across an association.
	Binary associations are most common, but n-ary connection can be specified with an ternary association. Also association class, OR association, and note connection can be attached to aggregations by selecting the relationship and then adding a new role to the relationship through a selection from a pop-up menu.
	---------------------------------------------
	Association name: String
	Derived?: Boolean
	Derivation rules: OrderedCollection (String)
	Documentation: Text
Dependency [UML]
	Dependency show client-supplier links dependencies between logical elements. The client, pointed by an arrow, is dependent in some way on the client.
	---------------------------------------------
	Stereotype: String
	Alias name: String

==========================
Role Types
==========================
Initial step
Steps

==========================
Extra Types
==========================
Attribute [UML]
	Name: String
	Data type: String
	Default value: String
	Multiplicity: String
	Ordered?: Boolean
	Unique?: Boolean
	Sequence?: Boolean
	Stereotype: String
	Visibility: String
	Scope: String
	Access: String
	Derived?: Boolean
	Constraints: Text
	Documentation: Text
Class [UML]
	An class describes a group of objects with similar properties (attributes), common behaviour (operations), common relationships to other objects, and common semantics. Class is represented as a box with three parts each including different properties. Class name is in the first part of the class box toghether with a stereotype. List of attributes are in the second part, and list of operations are in the last box. Class can be characterized according to:
	- package they belong
	- whether it is abstract
	- whether it is persistent
	- how the element may be overridden by the subclass. Values: virtual - fully defined and may be overridden, leaf - fully defined and may not be overridden, deferred - protocol only defined and must be overridden, extensible - may be extended but not overridden
	- role (model, view, controller)
	- template parameters
	- constraints
	- invariant information
	- derivation rules
	- responsibility
	- documentation, and 
	- simple symbol? to choose whether the whole class symbol is shown or only class name and possible template parameters.
	
	Each attribute in a list field is used for entering in more detail characteristics of an attribute. These include: 
	- attribute name
	- data type
	- initial value
	- stereotype
	- visibility (public, private, or protected)
	- scope (class, instance, or class-instance)
	- access for the value
	- derived? to inform that the actual value is derived
	- persistent?
	- constraints
	- documentation
	
	A operation is a specific behavior that an object is responsible for exhibiting. Operation list field is used for adding in more detail specifications of an operation. Each operation can be specified by:
	- name
	- parameters containing parameter name, type and default value
	- return type (i.e. possibly object to be returned)
	- method body or operation specification
	- whether the operation can be overridden (virtual - fully defined and may be overridden, leaf - fully defined and may not be overridden, deferred - protocol only defined and must be overridden, extensible - may be extended but not overridden)
	- stereotype (e.g for Smalltalk protocols)
	- visibility (public, private, or protected)
	- operation type (class or instance)
	- preconditions
	- postconditions
	- documentation
	---------------------------------------------
	Class name: String
	Attributes: OrderedCollection (Attribute [UML])
	Operations: OrderedCollection (Operation [UML])
	Package: Package
	Abstract?: Boolean
	Active?: Boolean
	Stereotype: String
	Overridability: String
		How the element may be overridden by the subclass. Values:
		virtual - fully defined and may be overridden
		leaf - fully defined and may not be overridden
		deferred - protocol only defined and must be overridden
		extensible - may be extended but not overridden
		---------------------------------------------
	Role: String
	Parameters: OrderedCollection (Parameter)
	Constraints: Text
	Invariant: Text
	Derivation rules: OrderedCollection (String)
	Responsibility: Text
	Documentation: Text
	Simple symbol?: Boolean
Operation [UML]
	Operation name: String
	Parameters: OrderedCollection (Parameter)
	Return type: String
	Overridability: String
		How the element may be overridden by the subclass. Values:
		virtual - fully defined and may be overridden
		leaf - fully defined and may not be overridden
		deferred - protocol only defined and must be overridden
		extensible - may be extended but not overridden
		---------------------------------------------
	Stereotype: String
	Visibility: String
	Operation type: String
	Query?: Boolean
	Preconditions: Text
	Postconditions: Text
	Body: Text
	Documentation: Text
Parameter
	Parameter: String
	Data type: String
	Direction: String
	Default value: String
	Effect: String
	Exception?: Boolean
	Stream?: Boolean
Variable [UML]
	Value: String
	Attribute: Attribute [UML]

==========================
Bindings
==========================
Association [UML]
	Initial step: Node
	Steps: Artifact, Node

==========================
Constraints
==========================

==========================
Subgraphs
==========================

