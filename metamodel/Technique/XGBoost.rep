XGBoost()
'def print_cv_params(selecter_param, selecter_param_str, parameters)' newline
  
'  grid_search = GridSearchCV(estimator = model_xgb,' newline
'                            param_grid = parameters,' newline
'                            scoring = ''neg_mean_squared_error'',' newline
'                            cv = 10,' newline
'                            n_jobs = -1)' newline

'  grid_result = grid_search.fit(X, y)' newline

'  print("Best: %f using %s" % (grid_result.best_score_, grid_result.best_params_))' newline
'  means = grid_result.cv_results_[''mean_test_score'']' newline
'  stds = grid_result.cv_results_[''std_test_score'']' newline
'  params = grid_result.cv_results_[''params'']' newline
'  for mean, stdev, param in zip(means, stds, params):' newline
'    print("%f (%f) with: %r" % (mean, stdev, param))' newline

'  pyplot.errorbar(selecter_param, means, yerr=stds)' newline
'  pyplot.title("XGBoost "+ selecter_param_str + " vs Mean Squared Error")' newline
'  pyplot.xlabel(selecter_param_str)' newline
'  pyplot.ylabel(''Mean Squared Error'')' newline
'model_xgb = XGBRegressor()' newline
'n_estimators = range(50, 800, 150)' newline
'parameters = dict(n_estimators=n_estimators)' newline

'print_cv_params(n_estimators, ''n_estimators'', parameters)' newline
